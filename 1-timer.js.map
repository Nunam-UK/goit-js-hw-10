{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["// Описаний в документації\nimport flatpickr from 'flatpickr';\n// Додатковий імпорт стилів\nimport 'flatpickr/dist/flatpickr.min.css';\n\n// Описаний у документації\nimport iziToast from 'izitoast';\n// Додатковий імпорт стилів\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst inputEl = document.querySelector('#datetime-picker');\nconst btn = document.querySelector('[data-start]');\nconst timer = document.querySelector('.timer');\n\nlet userDate = null;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    console.log(selectedDates[0]);\n    if (selectedDates[0] < options.defaultDate) {\n      iziToast.error({\n        message: 'Please choose a date in the future',\n      });\n    } else {\n      btn.disabled = false;\n      userDate = selectedDates[0];\n    }\n  },\n};\n\nflatpickr(inputEl, options);\n\nbtn.addEventListener('click', onClick);\nfunction onClick(event) {\n  btn.disabled = true;\n  inputEl.disabled = true;\n  const intervalID = setInterval(() => {\n    const currentDate = Date.now();\n    const diff = userDate - currentDate;\n    const { days, hours, minutes, seconds } = convertMs(diff);\n    if (diff <= 1000) {\n      clearInterval(intervalID);\n      iziToast.success({\n        message: 'Finish',\n      });\n\n      inputEl.disabled = false;\n    }\n    timer.querySelector('[data-days]').textContent = pad(days);\n    timer.querySelector('[data-hours]').textContent = pad(hours);\n    timer.querySelector('[data-minutes]').textContent = pad(minutes);\n    timer.querySelector('[data-seconds]').textContent = pad(seconds);\n    console.log(diff);\n  }, 1000);\n}\n\nfunction pad(value) {\n  return String(value).padStart(2, 0);\n}\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n"],"names":["inputEl","btn","timer","userDate","options","selectedDates","iziToast","flatpickr","onClick","event","intervalID","currentDate","diff","days","hours","minutes","seconds","convertMs","pad","value","ms"],"mappings":"+IAUA,MAAMA,EAAU,SAAS,cAAc,kBAAkB,EACnDC,EAAM,SAAS,cAAc,cAAc,EAC3CC,EAAQ,SAAS,cAAc,QAAQ,EAE7C,IAAIC,EAAW,KAEf,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,QAAQ,IAAIA,EAAc,CAAC,CAAC,EACxBA,EAAc,CAAC,EAAID,EAAQ,YAC7BE,EAAS,MAAM,CACb,QAAS,oCACjB,CAAO,GAEDL,EAAI,SAAW,GACfE,EAAWE,EAAc,CAAC,EAE7B,CACH,EAEAE,EAAUP,EAASI,CAAO,EAE1BH,EAAI,iBAAiB,QAASO,CAAO,EACrC,SAASA,EAAQC,EAAO,CACtBR,EAAI,SAAW,GACfD,EAAQ,SAAW,GACnB,MAAMU,EAAa,YAAY,IAAM,CACnC,MAAMC,EAAc,KAAK,MACnBC,EAAOT,EAAWQ,EAClB,CAAE,KAAAE,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUL,CAAI,EACpDA,GAAQ,MACV,cAAcF,CAAU,EACxBJ,EAAS,QAAQ,CACf,QAAS,QACjB,CAAO,EAEDN,EAAQ,SAAW,IAErBE,EAAM,cAAc,aAAa,EAAE,YAAcgB,EAAIL,CAAI,EACzDX,EAAM,cAAc,cAAc,EAAE,YAAcgB,EAAIJ,CAAK,EAC3DZ,EAAM,cAAc,gBAAgB,EAAE,YAAcgB,EAAIH,CAAO,EAC/Db,EAAM,cAAc,gBAAgB,EAAE,YAAcgB,EAAIF,CAAO,EAC/D,QAAQ,IAAIJ,CAAI,CACjB,EAAE,GAAI,CACT,CAEA,SAASM,EAAIC,EAAO,CAClB,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,CAAC,CACpC,CAEA,SAASF,EAAUG,EAAI,CAQrB,MAAMP,EAAO,KAAK,MAAMO,EAAK,KAAG,EAE1BN,EAAQ,KAAK,MAAOM,EAAK,MAAO,IAAI,EAEpCL,EAAU,KAAK,MAAQK,EAAK,MAAO,KAAQ,GAAM,EAEjDJ,EAAU,KAAK,MAASI,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAP,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}